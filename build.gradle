plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.2'
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'application'
    id 'jacoco'
    id 'com.google.osdetector' version '1.4.0'
}

apply from: 'http://dl.bintray.com/shemnon/javafx-gradle/8.1.1/javafx.plugin'

version = '0.1.0'

javafx {
    appID = 'GRIP'
    appName = 'GRIP'
    mainClass = "edu.wpi.grip.ui.Main"
}

mainClassName = "edu.wpi.grip.core.Main"

sourceSets {
    generated {
        java {
            /* Note: When referencing this it becomes `srcDirs` */
            srcDir 'src/generated/java'
        }
    }
}


repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'org.controlsfx', name: 'controlsfx', version: '8.40.10'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'com.google.inject', name: 'guice', version: '4.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'org.python', name: 'jython', version: '2.7.0'
    compile group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.8'
    compile group: 'org.bytedeco', name: 'javacv', version: '1.1'
    compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '3.0.0-1.1'
    compile group: 'org.bytedeco.javacpp-presets', name: 'opencv', version: '3.0.0-1.1', classifier: osdetector.classifier.replace("osx", "macosx")

    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.testfx', name: 'testfx-core', version: '4.0.+'
    testCompile group: 'org.testfx', name: 'testfx-junit', version: '4.0.+'
}

compileJava.source sourceSets.generated.java, sourceSets.main.java

task generateCodeFromSource(type: CodeGenerator) {
    description 'Generates the Operation Wrappers for the OpenCV methods.\n To skip run with parm `-PskipGenerate`'
    dest sourceSets.generated.java.srcDirs
    removeExisting true
}
generateCodeFromSource.onlyIf { !project.hasProperty('skipGenerate') }
compileJava.dependsOn generateCodeFromSource

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
check.dependsOn jacocoTestReport

allprojects {
    tasks.withType(Javadoc) {
        source compileJava.source
        options.addStringOption('Xdoclint:all,-html', '-quiet')
    }
}

// IDE setup

eclipse.classpath {
    file.whenMerged { cp ->
        sourceSets.generated.java.srcDirs.forEach { srcDir ->
            def source_folder = new org.gradle.plugins.ide.eclipse.model.SourceFolder(srcDir.getAbsolutePath(), "build/classes/merged")
            if (cp.entries.find() { it.path == source_folder.path } == null)
                cp.entries.add(source_folder)
        }
    }
}

idea.module {
    sourceDirs += sourceSets.generated.java.srcDirs
}

// End IDE setup

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
